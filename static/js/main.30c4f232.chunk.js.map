{"version":3,"sources":["components/quote.js","components/new_quote.js","actions/index.js","components/TweetQuote.js","containers/quote_box.js","components/App.js","serviceWorker.js","reducers/index.js","reducers/reducer_quote.js","store.js","index.js"],"names":["Quote","props","react_default","a","createElement","className","id","quote","data","content","title","NewQuoteButton","href","onClick","this","handleOnClick","Component","ROOT_URL","FETCH_QUOTE","fetchQuote","request","axios","get","console","log","type","payload","TweetQuote","QuoteBox","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","preventDefault","new_quote_NewQuoteButton","components_TweetQuote","connect","state","dispatch","bindActionCreators","App","quote_box","Boolean","window","location","hostname","match","rootReducer","combineReducers","arguments","length","undefined","action","concat","toConsumableArray","store","applyMiddleware","ReduxPromise","createStore","createStoreWithMiddleware","reducers","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAkBeA,EAfD,SAACC,GACX,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,QACHL,EAAMM,MAAMC,KAAK,GAAGC,SAEzBP,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UACHL,EAAMM,MAAMC,KAAK,GAAGE,SCRhBC,mLAEb,OACQT,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,GAAEN,GAAG,YAAYO,QAASC,KAAKb,MAAMc,eAA7C,oBAH4BC,8BCAtCC,EAAW,wFAEJC,EAAc,cAEpB,SAASC,IACZ,IAAMC,EAAUC,IAAMC,IAAIL,GAE1B,OADAM,QAAQC,IAAIJ,GACL,CACHK,KAAMP,EACNQ,QAASN,cCHFO,EANI,SAAC1B,GAChB,OACIC,EAAAC,EAAAC,cAAA,KAAGQ,KAAK,mCAAmCN,GAAG,eAA9C,UCKFsB,cACF,SAAAA,EAAY3B,GAAO,IAAA4B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAc,IACfC,EAAAC,OAAAE,EAAA,EAAAF,CAAAhB,KAAAgB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAApB,KAAMb,KAKVkC,YAAc,SAACC,GACXA,EAAMC,iBACNd,QAAQC,IAAI,SACZK,EAAK5B,MAAMkB,cATIU,oFAIff,KAAKb,MAAMkB,8CAQX,OAAKL,KAAKb,MAAMM,MAKZL,EAAAC,EAAAC,cAAA,OAAKE,GAAG,YAAYD,UAAU,aAC1BH,EAAAC,EAAAC,cAACG,EAAD,CAAOA,MAAOO,KAAKb,MAAMM,QACzBL,EAAAC,EAAAC,cAACkC,EAAD,CAAgBvB,cAAeD,KAAKqB,cACpCjC,EAAAC,EAAAC,cAACmC,EAAD,OAPIrC,EAAAC,EAAAC,cAAA,6BAdGY,aAsCRwB,kBAXf,SAAyBC,GACrB,MAAO,CACJlC,MAAOkC,EAAMlC,MAAM,KAI1B,SAA4BmC,GACxB,OAAOC,YAAmB,CAACxB,cAAauB,IAI7BF,CAA6CZ,GCnC7CgB,mLANX,OACI1C,EAAAC,EAAAC,cAACyC,EAAD,aAHU7B,aCQE8B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,wFCXSC,EAJKC,YAAgB,CAChC7C,MCAW,WAA8B,IAApBkC,EAAoBY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAZ,GAAIG,EAAQH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzC,OAAQC,EAAO/B,MACX,KAAKP,EAED,OADAK,QAAQC,IAAI,WAAYgC,GACxB,CAAQA,EAAO9B,SAAf+B,OAAA3B,OAAA4B,EAAA,EAAA5B,CAA2BW,IAEnC,OAAOA,KCDIkB,EAHmBC,YAAgBC,IAAhBD,CAA8BE,IAClDC,CAA0BC,GCExCC,IAASC,OACLhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,CAAUR,MAAOA,GACbzD,EAAAC,EAAAC,cAACgE,EAAD,OACSC,SAASC,eAAe,SJqHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.30c4f232.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\n\nconst Quote = (props) => {\n    return(\n        <div className='quote'>\n            <div id=\"text\">\n                {props.quote.data[0].content}\n            </div>\n            <div id=\"author\">\n                {props.quote.data[0].title}\n\n            </div>\n\n        </div>\n    )\n}\n\nexport default Quote;","import React, {Component} from 'react';\n\nexport default class NewQuoteButton extends Component {\n    render() {\n        return (\n                <a href=\"\"id=\"new-quote\" onClick={this.props.handleOnClick}>\n                    New Quote\n                </a>\n        )\n    }\n\n}","import axios from 'axios';\n\nconst ROOT_URL = 'http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1';\n\nexport const FETCH_QUOTE = 'FETCH_QUOTE';\n\nexport function fetchQuote() {\n    const request = axios.get(ROOT_URL);\n    console.log(request)\n    return {\n        type: FETCH_QUOTE,\n        payload: request\n    }\n}","import React from 'react';\n\nconst TweetQuote = (props) => {\n    return (\n        <a href=\"https://twitter.com/intent/tweet\" id=\"tweet-quote\">tweet</a>\n    )\n}\n\nexport default TweetQuote;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport Quote from '../components/quote';\nimport NewQuoteButton from '../components/new_quote';\nimport { fetchQuote } from '../actions/index.js';\nimport {bindActionCreators} from 'redux';\nimport TweetQuote from '../components/TweetQuote';\n\n\nclass QuoteBox extends Component {\n    constructor(props) {\n        super(props)\n    }\n    componentWillMount() {\n        this.props.fetchQuote()\n    }\n    handleClick = (event) => {\n        event.preventDefault()\n        console.log('click')\n        this.props.fetchQuote()\n    }\n    render() {\n        if (!this.props.quote) {\n            return( <div>Loading</div>)\n        }\n\n        return (\n            <div id=\"quote-box\" className=\"quote-box\">\n                <Quote quote={this.props.quote}/>\n                <NewQuoteButton handleOnClick={this.handleClick}/>\n                <TweetQuote/>\n            </div>\n        )\n    }\n}\n\nfunction mapPropsToState(state) {\n    return {\n       quote: state.quote[0]\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({fetchQuote}, dispatch)\n}\n\n\nexport default connect(mapPropsToState, mapDispatchToProps)(QuoteBox);","import React, { Component } from 'react';\nimport '../App.css';\nimport QuoteBox from '../containers/quote_box';\n\nclass App extends Component {\n  render() {\n    return (\n        <QuoteBox/>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\nimport QuoteReducer from './reducer_quote';\n\nconst rootReducer = combineReducers({\n    quote: QuoteReducer\n});\n\nexport default rootReducer;","import {FETCH_QUOTE} from \"../actions\";\n\n// const initialState = 'http://quotesondesign.com/wp-json/posts?filter[orderby]=rand&filter[posts_per_page]=1';\n\nexport default function (state = [], action) {\n    switch (action.type) {\n        case FETCH_QUOTE:\n            console.log('action: ', action)\n            return [action.payload, ...state];\n    }\n    return state;\n}","import {createStore, applyMiddleware} from 'redux';\nimport ReduxPromise from 'redux-promise';\n\n\nimport reducers from './reducers';\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore);\nconst store = createStoreWithMiddleware(reducers);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {Provider} from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}